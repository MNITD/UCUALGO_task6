import math

# data = [{"length": 24698, "cities": [[1380, 939], [2848, 96], [3510, 1671], [457, 334], [3888, 666], [984, 965], [2721, 1482], [1286, 525], [2716, 1432], [738, 1325], [1251, 1832], [2728, 1698], [3815, 169], [3683, 1533], [1247, 1945], [123, 862], [1234, 1946], [252, 1240], [611, 673], [2576, 1676], [928, 1700], [53, 857], [1807, 1711], [274, 1420], [2574, 946], [178, 24], [2678, 1825], [1795, 962], [3384, 1498], [3520, 1079], [1256, 61], [1424, 1728], [3913, 192], [3085, 1528], [2573, 1969], [463, 1670], [3875, 598], [298, 1513], [3479, 821], [2542, 236], [3955, 1743], [1323, 280], [3447, 1830], [2936, 337], [1621, 1830], [3373, 1646], [1393, 1368], [3874, 1318], [938, 955], [3022, 474], [2482, 1183], [3854, 923], [376, 825], [2519, 135], [2945, 1622], [953, 268], [2628, 1479], [2097, 981], [890, 1846], [2139, 1806], [2421, 1007], [2290, 1810], [1115, 1052], [2588, 302], [327, 265], [241, 341], [1917, 687], [2991, 792], [2573, 599], [19, 674], [3911, 1673], [872, 1559], [2863, 558], [929, 1766], [839, 620], [3893, 102], [2178, 1619], [3822, 899], [378, 1048], [1178, 100], [2599, 901], [3416, 143], [2961, 1605], [611, 1384], [3113, 885], [2597, 1830], [2586, 1286], [161, 906], [1429, 134], [742, 1025], [1625, 1651], [1187, 706], [1787, 1009], [22, 987], [3640, 43], [3756, 882], [776, 392], [1724, 1642], [198, 1810], [3950, 1558]], "size": 100}, {"length": 31482, "cities": [[1380, 939], [2848, 96], [3510, 1671], [457, 334], [3888, 666], [984, 965], [2721, 1482], [1286, 525], [2716, 1432], [738, 1325], [1251, 1832], [2728, 1698], [3815, 169], [3683, 1533], [1247, 1945], [123, 862], [1234, 1946], [252, 1240], [611, 673], [2576, 1676], [928, 1700], [53, 857], [1807, 1711], [274, 1420], [2574, 946], [178, 24], [2678, 1825], [1795, 962], [3384, 1498], [3520, 1079], [1256, 61], [1424, 1728], [3913, 192], [3085, 1528], [2573, 1969], [463, 1670], [3875, 598], [298, 1513], [3479, 821], [2542, 236], [3955, 1743], [1323, 280], [3447, 1830], [2936, 337], [1621, 1830], [3373, 1646], [1393, 1368], [3874, 1318], [938, 955], [3022, 474], [2482, 1183], [3854, 923], [376, 825], [2519, 135], [2945, 1622], [953, 268], [2628, 1479], [2097, 981], [890, 1846], [2139, 1806], [2421, 1007], [2290, 1810], [1115, 1052], [2588, 302], [327, 265], [241, 341], [1917, 687], [2991, 792], [2573, 599], [19, 674], [3911, 1673], [872, 1559], [2863, 558], [929, 1766], [839, 620], [3893, 102], [2178, 1619], [3822, 899], [378, 1048], [1178, 100], [2599, 901], [3416, 143], [2961, 1605], [611, 1384], [3113, 885], [2597, 1830], [2586, 1286], [161, 906], [1429, 134], [742, 1025], [1625, 1651], [1187, 706], [1787, 1009], [22, 987], [3640, 43], [3756, 882], [776, 392], [1724, 1642], [198, 1810], [3950, 1558], [3477, 949], [91, 1732], [3972, 329], [198, 1632], [1806, 733], [538, 1023], [3430, 1088], [2186, 766], [1513, 1646], [2143, 1611], [53, 1657], [3404, 1307], [1034, 1344], [2823, 376], [3104, 1931], [3232, 324], [2790, 1457], [374, 9], [741, 146], [3083, 1938], [3502, 1067], [1280, 237], [3326, 1846], [217, 38], [2503, 1172], [3527, 41], [739, 1850], [3548, 1999], [48, 154], [1419, 872], [1689, 1223], [3468, 1404], [1628, 253], [382, 872], [3029, 1242], [3646, 1758], [285, 1029], [1782, 93], [1067, 371], [2849, 1214], [920, 1835], [1741, 712], [876, 220], [2753, 283], [2609, 1286], [3941, 258], [3613, 523], [1754, 559], [2916, 1724], [2445, 1820]], "size": 150}, {"length": 34548, "cities": [[1357, 1905], [2650, 802], [1774, 107], [1307, 964], [3806, 746], [2687, 1353], [43, 1957], [3092, 1668], [185, 1542], [834, 629], [40, 462], [1183, 1391], [2048, 1628], [1097, 643], [1838, 1732], [234, 1118], [3314, 1881], [737, 1285], [779, 777], [2312, 1949], [2576, 189], [3078, 1541], [2781, 478], [705, 1812], [3409, 1917], [323, 1714], [1660, 1556], [3729, 1188], [693, 1383], [2361, 640], [2433, 1538], [554, 1825], [913, 317], [3586, 1909], [2636, 727], [1000, 457], [482, 1337], [3704, 1082], [3635, 1174], [1362, 1526], [2049, 417], [2552, 1909], [3939, 640], [219, 898], [812, 351], [901, 1552], [2513, 1572], [242, 584], [826, 1226], [3278, 799], [86, 1065], [14, 454], [1327, 1893], [2773, 1286], [2469, 1838], [3835, 963], [1031, 428], [3853, 1712], [1868, 197], [1544, 863], [457, 1607], [3174, 1064], [192, 1004], [2318, 1925], [2232, 1374], [396, 828], [2365, 1649], [2499, 658], [1410, 307], [2990, 214], [3646, 1018], [3394, 1028], [1779, 90], [1058, 372], [2933, 1459], [3099, 173], [2178, 978], [138, 1610], [2082, 1753], [2302, 1127], [805, 272], [22, 1617], [3213, 1085], [99, 536], [1533, 1780], [3564, 676], [29, 6], [3808, 1375], [2221, 291], [3499, 1885], [3124, 408], [781, 671], [1027, 1041], [3249, 378], [3297, 491], [213, 220], [721, 186], [3736, 1542], [868, 731], [960, 303], [1380, 939], [2848, 96], [3510, 1671], [457, 334], [3888, 666], [984, 965], [2721, 1482], [1286, 525], [2716, 1432], [738, 1325], [1251, 1832], [2728, 1698], [3815, 169], [3683, 1533], [1247, 1945], [123, 862], [1234, 1946], [252, 1240], [611, 673], [2576, 1676], [928, 1700], [53, 857], [1807, 1711], [274, 1420], [2574, 946], [178, 24], [2678, 1825], [1795, 962], [3384, 1498], [3520, 1079], [1256, 61], [1424, 1728], [3913, 192], [3085, 1528], [2573, 1969], [463, 1670], [3875, 598], [298, 1513], [3479, 821], [2542, 236], [3955, 1743], [1323, 280], [3447, 1830], [2936, 337], [1621, 1830], [3373, 1646], [1393, 1368], [3874, 1318], [938, 955], [3022, 474], [2482, 1183], [3854, 923], [376, 825], [2519, 135], [2945, 1622], [953, 268], [2628, 1479], [2097, 981], [890, 1846], [2139, 1806], [2421, 1007], [2290, 1810], [1115, 1052], [2588, 302], [327, 265], [241, 341], [1917, 687], [2991, 792], [2573, 599], [19, 674], [3911, 1673], [872, 1559], [2863, 558], [929, 1766], [839, 620], [3893, 102], [2178, 1619], [3822, 899], [378, 1048], [1178, 100], [2599, 901], [3416, 143], [2961, 1605], [611, 1384], [3113, 885], [2597, 1830], [2586, 1286], [161, 906], [1429, 134], [742, 1025], [1625, 1651], [1187, 706], [1787, 1009], [22, 987], [3640, 43], [3756, 882], [776, 392], [1724, 1642], [198, 1810], [3950, 1558]], "size": 200}]

# cities = data[0]["cities"]
# cities = [[1,2], [5,6], [4,9]]


def construct_matrix(cities):
    matrix = []
    i = 0
    matrix.append([0])
    while i < len(cities):
        matrix.append([(cities[i])])
        matrix[0].append((cities[i], i))
        i += 1

    i = 1
    while i < len(cities)+1:
        j = 1
        while j < len(cities)+1:
            x1 = matrix[i][0][0]
            y1 = matrix[i][0][1]
            x2 = matrix[0][j][0][0]
            y2 = matrix[0][j][0][1]
            matrix[i].append((math.sqrt(math.pow(x1 - x2, 2) + math.pow(y2 - y1, 2)), j - 1 ))
            j += 1
        i += 1

    return matrix


def reduce_matrix(matrix):
    matrix = matrix[1:]
    i = 0
    while i < len(matrix):
        matrix[i] = matrix[i][1:]
        i += 1
    return matrix


def sort_matrix(matrix):
    i = 0
    while i < len(matrix):
        matrix[i] = sorted(matrix[i],key=lambda tup: tup[0])
        i += 1
    return matrix


def is_unvisited(id, visited_cities_ids):
    for i in visited_cities_ids:
        if i == id:
            return False
    return True


def find_valid_min(matrix, current_id, visited_cities_ids):
    i = 0
    while i < len(matrix):
        if matrix[current_id][i][0] != 0.0 \
                and is_unvisited(matrix[current_id][i][1], visited_cities_ids):
            return matrix[current_id][i]
        i += 1

    visited_cities_ids.remove(0)
    return find_valid_min(matrix, current_id, visited_cities_ids)


def tsp(data):
    length = 0
    path = [0]
    visited_cities_ids = []
    visited_cities_ids.append(0)


    matrix = construct_matrix(data)
    matrix = reduce_matrix(matrix)
    matrix = sort_matrix(matrix)


    current_city_id = 0
    times = 0
    while current_city_id != 0 or times == 0:
        times += 1
        minimum = find_valid_min(matrix, current_city_id, visited_cities_ids)
        length += minimum[0]
        path.append(minimum[1])
        current_city_id = minimum[1]
        visited_cities_ids.append(current_city_id)
    return length, path


def description():
    return "Алгоритм найближчого сусіда: " \
           "1. Побудувати матрицю відстаней між містами " \
           "2. Відсортувати кожен рядок матриці за зростанням " \
           "3. Знайти для кожного міста, починаючи з нульового, найближчого сусіда " \
           "3.1. Невраховувати міста, які вже були відвіданні " \
           "4. Повторювати процес пошуку сусіда для кожного знайденого найближчого сусіда " \
           "5. Кожен раз видаляємо з множини невідвіданих міст знайдене місто-сусіда"





